{"version":3,"sources":["logo.svg","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","state","title","responsible","description","priority","handleInput","bind","handleSubmit","e","target","value","name","this","setState","preventDefault","props","onAddTodo","console","log","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","todo","index","window","confirm","filter","i","map","key","onClick","removeTodo","href","length","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7f816f20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nexport default class TodoForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      title: \"\",\r\n      responsible: \"\",\r\n      description: \"\",\r\n      priority: \"low\",\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleInput(e) {\r\n    const { value, name } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);    \r\n    console.log(\"Enviando datos\");\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"card container\">\r\n        <form className=\"card-body\" onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={this.handleInput}\r\n              className=\"form-control\"\r\n              placeholder=\"Title\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"responsible\"\r\n              className=\"form-control\"\r\n              placeholder=\"Responsable\"\r\n              onChange={this.handleInput}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"description\"\r\n              className=\"form-control\"\r\n              placeholder=\"Descripcion\"\r\n              onChange={this.handleInput}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <select\r\n              name=\"priority\"\r\n              className=\"form-control\"\r\n              onChange={this.handleInput}\r\n            >\r\n              <option value=\"low\">low</option>\r\n              <option value=\"medium\">medium</option>\r\n              <option value=\"higth\">higth</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"submit\"\r\n              name=\"description\"\r\n              className=\"form-control btn btn-primary\"\r\n              placeholder=\"Descripcion\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { todos } from \"./todos.json\";\nimport TodoFrom from \"./components/TodoForm\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos,\n    };\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  handleAddTodo(todo) {\n    this.setState({\n      todos: [...this.state.todos, todo],\n    });\n  }\n  removeTodo(index) {\n    if (window.confirm(\"Usted esta seguro de eliminar el \")) {\n      this.setState({\n        todos: this.state.todos.filter((e, i) => {\n          return i !== index;\n        }),\n      });\n    }\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        <div className=\"col-md-4 mb-4\" key={i}>\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3>{todo.title}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {todo.priority}\n              </span>\n            </div>\n            <div className=\"card-body\">\n              <p>{todo.description}</p>\n              <p>\n                <mark>{todo.responsible}</mark>\n              </p>\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\" btn btn-danger\"\n                onClick={this.removeTodo.bind(this, i)}\n              >\n                Borrar\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        {/* Formulario */}\n        <div className=\"row mt-4 mb-4\">\n          <TodoFrom onAddTodo={this.handleAddTodo} />\n        </div>\n        {/* la navegacion */}\n        <nav className=\"container navbar navbar-dark bg-dark\">\n          <a href=\"http://localhost:3000\" className=\"text-white\">\n            Task\n            <span className=\"badge badge-pill badge-light ml-2\">\n              {this.state.todos.length}\n            </span>\n          </a>\n        </nav>\n        {/* Las tareas */}\n        <div className=\"container\">\n          <div className=\"row mt-4\">{todos}</div>\n        </div>\n        {/* El logo */}\n        <img src={logo} className=\"App-logo\" alt=\"logo \" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById('root')\n                );\nserviceWorker.unregister();\n"],"sourceRoot":""}